Version: 0.1.3 2023/09/30

Added macro to automatically create basic Enums with size info, a to_string function and print compatible
Increased compatibility of __debugbreak with other systems.
Replaced usages of sprintf_s with standard function snprintf for compatibility.
Added INFINITY and NAN macros when working with float/double/f32/f64.

Version: 0.1.2 2023/09/24
---------------------------------

Fixed print for str and str_builder being printed as arroy of u8 instead of a string.


Version: 0.1.1 2023/09/23
---------------------------------

Defined some macros to automatically import `first.h` if you include just a single module like `math.h`.
Same thing with performance counter and `profiling_v1.h`, `simple_benchmark.h` and `simple_profiling.h`.
Some general cleaning in `profiling_v1.h` (private variables and used ANCHORS_AMT define).

first.h:
    Reimplemented print and printsl to improve performance (as of now we're about at printf speed, sometimes slightly faster).
    Renamed custom print implementations to print_custom, you should rename them also in your code.
    Added print2, a new type of print which should be faster than printf. We don't know if we'll keep it because of it's stranger usage.

simple_benchmark.h:
    Added macros BENCHMARK_COMPARE and BENCHMARK_COMPARE_VOID to quickly benchmark 2 functions with the same inputs, to know if the second one is faster or slower. You can find comments on how they work inside the module.

str.h:
    Added overloads str_builder_append() for u8, s8, u16, s16, u32, s32, u64, s64, f32, f64, char. These will convert the numbers into string representation and add it to the builder.

dynamic_array.h:
    Added array_reserve() function.

math.h:
    Added remap function, with overloads for float, vec2, vec3 and vec4.
    struct col for colors can now be printed.

Version: 0.1.0 2023/09/16
---------------------------------

First release of gyoutils. Here's most of the stuff it includes (in no particular order):

Dynamic array 'Array<T>', a simple replacement to std::vector.
Basic types s8, u8, s16, u16, s32, u32, s64, u64, f32, f64.
Max and Min values for integer types.
A quicker alternative to printf called 'print', easily extendable.
An alternative to print for single line printing, called 'printsl'.
ASSERT macro with custom message printing and debug breaking.
defer macro for memory/resource deinitialization, can be used with any code.
math functions and values (there's a lot, principal are vec2/3/4 and mat4, sin and cos using turns instead of radians making them faster than most other implementations).
Basic performance counters.
Basic function/block profiling, handling inner and recursive functions too.
Basic benchmarking, repeating a piece of code many times to analyze it's performance.
str and str_builders, a simple replacement to std::string.
windows file handling utility functions to simplify working with files.
