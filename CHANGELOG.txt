Version: 0.1.4
---------------------------------

str.h:
    Added str_parser, a new construct to parse str and binary files.
    Added str_ends_with function (with char and str overloads) to know if a str ends with something.
    Added/Replaced str_trim with str_trim_inplace, now the _inplace version takes and edits the pointer, while the _trim version returns a new str.
    Added unicode_utf8_to_codepoint(...) function
    
    Fixed some functions using printf instead of snprintf (the platform independent alternative).
    Changed unicode_utf8_to_size(...) and unicode_codepoint_to_size(...) to return s8 instead of u8, this leads to more performant code when used in array access (and since the returned value is always 1 to 4 it's simply a preferable choice)
    
win64_files.h:
    Added win64_print_error() to quickly print any error that happened duinr windows api calls.
    Added get_drive_names to know your drives names.
    Added get_only_files_in_dir to know which folders are in a directory.
    Fixed get_only_files_in_dir and get_only_folders_in_dir failing when interacting with files used by other processes, now they simply get skipped since we can't get their attributes.
    Minor change of function signature for get_only_files_in_dir and get_only_folders_in_dir, now they take a str as folder_path instead of const char* (const char* get converted automatically to str so you shouldn't notice any change).

math.h:
    Added vec2, vec3 and vec4 constructor, so it will be automatically cast variables to float (e.g. `int a = 4;  vec2 b = {a, a*2};`).
    Added vec4 * mat4 and mat4 * vec4 operations.
    Added vecN / vecN operations ({1, 5, 3} / {2, 6, 7} == {1 / 2, 5 / 6, 3 / 7}).
    Improved vec4 remap function to use SIMD.

first.h:
    Fixed a bug in the `count_digits` function (precision loss)
    Fixed macro redefinition warning/error for INFINITY and NAN in first.h

Version: 0.1.3 2023/10/01
---------------------------------

Added macro in first.h to automatically create basic Enums with size info, a to_string function and print compatible
Added BENCHMARK_VOID_MANY_INPUTS and BENCHMARK_MANY_INPUTS in simple_benchmark.h to test the same function with different inputs and record data on each one
Reimplemented BENCHMARK_FUNC and BENCHMARK_FUNC_VOID to run until there's been 10 seconds of no changes to the best recorded time.

Increased compatibility of __debugbreak with other systems.
Replaced usages of sprintf_s with standard function snprintf for compatibility.
Added INFINITY and NAN macros when working with float/double/f32/f64.

Fixed in gcc ASSERT macro errors about __VA_ARGS__ when used without arguments.
Fixed in gcc error about __m128 and {} in math.h.
Fixed in gcc __rdtsc error.

Version: 0.1.2 2023/09/24
---------------------------------

Fixed print for str and str_builder being printed as array of u8 instead of a string.


Version: 0.1.1 2023/09/23
---------------------------------

Defined some macros to automatically import `first.h` if you include just a single module like `math.h`.
Same thing with performance counter and `profiling_v1.h`, `simple_benchmark.h` and `simple_profiling.h`.
Some general cleaning in `profiling_v1.h` (private variables and used ANCHORS_AMT define).

first.h:
    Reimplemented print and printsl to improve performance (as of now we're about at printf speed, sometimes slightly faster).
    Renamed custom print implementations to print_custom, you should rename them also in your code.
    Added print2, a new type of print which should be faster than printf. We don't know if we'll keep it because of it's stranger usage.

simple_benchmark.h:
    Added macros BENCHMARK_COMPARE and BENCHMARK_COMPARE_VOID to quickly benchmark 2 functions with the same inputs, to know if the second one is faster or slower. You can find comments on how they work inside the module.

str.h:
    Added overloads str_builder_append() for u8, s8, u16, s16, u32, s32, u64, s64, f32, f64, char. These will convert the numbers into string representation and add it to the builder.

dynamic_array.h:
    Added array_reserve() function.

math.h:
    Added remap function, with overloads for float, vec2, vec3 and vec4.
    struct col for colors can now be printed.

Version: 0.1.0 2023/09/16
---------------------------------

First release of gyoutils. Here's most of the stuff it includes (in no particular order):

Dynamic array 'Array<T>', a simple replacement to std::vector.
Basic types s8, u8, s16, u16, s32, u32, s64, u64, f32, f64.
Max and Min values for integer types.
A quicker alternative to printf called 'print', easily extendable.
An alternative to print for single line printing, called 'printsl'.
ASSERT macro with custom message printing and debug breaking.
defer macro for memory/resource deinitialization, can be used with any code.
math functions and values (there's a lot, principal are vec2/3/4 and mat4, sin and cos using turns instead of radians making them faster than most other implementations).
Basic performance counters.
Basic function/block profiling, handling inner and recursive functions too.
Basic benchmarking, repeating a piece of code many times to analyze it's performance.
str and str_builders, a simple replacement to std::string.
windows file handling utility functions to simplify working with files.
